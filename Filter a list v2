------------------------------------------------------------------------------------------

TablenameRow - supabase table with capital start and Row in the end
tablename - supabase table name as its Wright in supabase
columnName - supabase coulumn name to filter on
argu - argumnet name to the filter

all the common Filters-.eq .neq .gt .gte .lt .lte

------------------------------------------------------------------------------------------

// Automatic FlutterFlow imports
import '/backend/supabase/supabase.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:supabase_flutter/supabase_flutter.dart';

Future<List<TablenameRow>> fetchFiltersV2(
  String? argu,
  String? argu,
) async {
  try {
    // Start building the query
    var query = Supabase.instance.client.from('tablename').select();

    // Add filters conditionally
    if (argu != null && argu.isNotEmpty) {
      query = query.eq('columnName', argu);
    }
   if (argu != null && argu.isNotEmpty) {
      query = query.eq('columnName', argu);
    }
   if (argu != null && argu.isNotEmpty) {
      query = query.eq('columnName', argu);
    } 

    // Execute the query and handle response
    final response = await query;
    if (response.isNotEmpty) {
      return response.map((item) => TablenameRow(item)).toList();
    }
    return []; // Return empty list if no data
  } catch (e) {
    debugPrint('Error fetching filters: $e');
    return [];
  }
}
// Set your action name, define your arguments and return parameter,
// and then add the boilerplate code using the green button on the right!

------------------------------------------------------------------------------------------
